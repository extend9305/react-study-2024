{"ast":null,"code":"var _jsxFileName = \"/Users/dongsulee/workspace/2024/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n\n    // new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    //....\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/dongsulee/workspace/2024/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { json, useLoaderData ,defer, Await} from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n\n  const {events} = useLoaderData();\n\n  return <Await resolve={events}></Await>\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n    const response = await fetch(\"http://localhost:8080/events\");\n\n    if (!response.ok) {\n      throw json(\n          {message : 'Could not fetch events.'},\n          {status : 500}\n      ) \n      \n      // new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      //   status: 500,\n      // });\n      //....\n    } else {\n      return response;\n    }\n}\n\nexport function loader() {\n  return defer({\n    events:loadEvents()\n  })\n}\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AACnE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAM;IAACC;EAAM,CAAC,GAAGR,aAAa,CAAC,CAAC;EAEhC,oBAAOK,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACzC;AAACN,EAAA,CALQD,UAAU;EAAA,QAEAN,aAAa;AAAA;AAAAc,EAAA,GAFvBR,UAAU;AAOnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAE;EACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMnB,IAAI,CACN;MAACoB,OAAO,EAAG;IAAyB,CAAC,EACrC;MAACC,MAAM,EAAG;IAAG,CACjB,CAAC;;IAED;IACA;IACA;IACA;EACF,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOpB,KAAK,CAAC;IACXO,MAAM,EAACO,UAAU,CAAC;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}